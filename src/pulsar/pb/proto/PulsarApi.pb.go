// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/PulsarApi.proto

/*
Package pulsar_proto is a generated protocol buffer package.

It is generated from these files:
	proto/PulsarApi.proto

It has these top-level messages:
	MessageIdData
	KeyValue
	MessageMetadata
	SingleMessageMetadata
	CommandConnect
	CommandConnected
	CommandSubscribe
	CommandPartitionedTopicMetadata
	CommandPartitionedTopicMetadataResponse
	CommandLookupTopic
	CommandLookupTopicResponse
	CommandProducer
	CommandSend
	CommandSendReceipt
	CommandSendError
	CommandMessage
	CommandAck
	CommandFlow
	CommandUnsubscribe
	CommandCloseProducer
	CommandCloseConsumer
	CommandRedeliverUnacknowledgedMessages
	CommandSuccess
	CommandProducerSuccess
	CommandError
	CommandPing
	CommandPong
	CommandConsumerStats
	CommandConsumerStatsResponse
	BaseCommand
*/
package pulsar_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CompressionType int32

const (
	CompressionType_NONE CompressionType = 0
	CompressionType_LZ4  CompressionType = 1
	CompressionType_ZLIB CompressionType = 2
)

var CompressionType_name = map[int32]string{
	0: "NONE",
	1: "LZ4",
	2: "ZLIB",
}
var CompressionType_value = map[string]int32{
	"NONE": 0,
	"LZ4":  1,
	"ZLIB": 2,
}

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}
func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}
func (x *CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompressionType_value, data, "CompressionType")
	if err != nil {
		return err
	}
	*x = CompressionType(value)
	return nil
}
func (CompressionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerError int32

const (
	ServerError_UnknownError        ServerError = 0
	ServerError_MetadataError       ServerError = 1
	ServerError_PersistenceError    ServerError = 2
	ServerError_AuthenticationError ServerError = 3
	ServerError_AuthorizationError  ServerError = 4
	ServerError_ConsumerBusy        ServerError = 5
	// other consumers are connected
	ServerError_ServiceNotReady                       ServerError = 6
	ServerError_ProducerBlockedQuotaExceededError     ServerError = 7
	ServerError_ProducerBlockedQuotaExceededException ServerError = 8
	ServerError_ChecksumError                         ServerError = 9
	ServerError_UnsupportedVersionError               ServerError = 10
	ServerError_TopicNotFound                         ServerError = 11
	ServerError_SubscriptionNotFound                  ServerError = 12
	ServerError_ConsumerNotFound                      ServerError = 13
	ServerError_TooManyRequests                       ServerError = 14
)

var ServerError_name = map[int32]string{
	0:  "UnknownError",
	1:  "MetadataError",
	2:  "PersistenceError",
	3:  "AuthenticationError",
	4:  "AuthorizationError",
	5:  "ConsumerBusy",
	6:  "ServiceNotReady",
	7:  "ProducerBlockedQuotaExceededError",
	8:  "ProducerBlockedQuotaExceededException",
	9:  "ChecksumError",
	10: "UnsupportedVersionError",
	11: "TopicNotFound",
	12: "SubscriptionNotFound",
	13: "ConsumerNotFound",
	14: "TooManyRequests",
}
var ServerError_value = map[string]int32{
	"UnknownError":                          0,
	"MetadataError":                         1,
	"PersistenceError":                      2,
	"AuthenticationError":                   3,
	"AuthorizationError":                    4,
	"ConsumerBusy":                          5,
	"ServiceNotReady":                       6,
	"ProducerBlockedQuotaExceededError":     7,
	"ProducerBlockedQuotaExceededException": 8,
	"ChecksumError":                         9,
	"UnsupportedVersionError":               10,
	"TopicNotFound":                         11,
	"SubscriptionNotFound":                  12,
	"ConsumerNotFound":                      13,
	"TooManyRequests":                       14,
}

func (x ServerError) Enum() *ServerError {
	p := new(ServerError)
	*p = x
	return p
}
func (x ServerError) String() string {
	return proto.EnumName(ServerError_name, int32(x))
}
func (x *ServerError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerError_value, data, "ServerError")
	if err != nil {
		return err
	}
	*x = ServerError(value)
	return nil
}
func (ServerError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AuthMethod int32

const (
	AuthMethod_AuthMethodNone   AuthMethod = 0
	AuthMethod_AuthMethodYcaV1  AuthMethod = 1
	AuthMethod_AuthMethodAthens AuthMethod = 2
)

var AuthMethod_name = map[int32]string{
	0: "AuthMethodNone",
	1: "AuthMethodYcaV1",
	2: "AuthMethodAthens",
}
var AuthMethod_value = map[string]int32{
	"AuthMethodNone":   0,
	"AuthMethodYcaV1":  1,
	"AuthMethodAthens": 2,
}

func (x AuthMethod) Enum() *AuthMethod {
	p := new(AuthMethod)
	*p = x
	return p
}
func (x AuthMethod) String() string {
	return proto.EnumName(AuthMethod_name, int32(x))
}
func (x *AuthMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AuthMethod_value, data, "AuthMethod")
	if err != nil {
		return err
	}
	*x = AuthMethod(value)
	return nil
}
func (AuthMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Each protocol version identify new features that are
// incrementally added to the protocol
type ProtocolVersion int32

const (
	ProtocolVersion_v0 ProtocolVersion = 0
	ProtocolVersion_v1 ProtocolVersion = 1
	ProtocolVersion_v2 ProtocolVersion = 2
	ProtocolVersion_v3 ProtocolVersion = 3
	ProtocolVersion_v4 ProtocolVersion = 4
	ProtocolVersion_v5 ProtocolVersion = 5
	ProtocolVersion_v6 ProtocolVersion = 6
	ProtocolVersion_v7 ProtocolVersion = 7
	ProtocolVersion_v8 ProtocolVersion = 8
)

var ProtocolVersion_name = map[int32]string{
	0: "v0",
	1: "v1",
	2: "v2",
	3: "v3",
	4: "v4",
	5: "v5",
	6: "v6",
	7: "v7",
	8: "v8",
}
var ProtocolVersion_value = map[string]int32{
	"v0": 0,
	"v1": 1,
	"v2": 2,
	"v3": 3,
	"v4": 4,
	"v5": 5,
	"v6": 6,
	"v7": 7,
	"v8": 8,
}

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}
func (x ProtocolVersion) String() string {
	return proto.EnumName(ProtocolVersion_name, int32(x))
}
func (x *ProtocolVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolVersion_value, data, "ProtocolVersion")
	if err != nil {
		return err
	}
	*x = ProtocolVersion(value)
	return nil
}
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CommandSubscribe_SubType int32

const (
	CommandSubscribe_Exclusive CommandSubscribe_SubType = 0
	CommandSubscribe_Shared    CommandSubscribe_SubType = 1
	CommandSubscribe_Failover  CommandSubscribe_SubType = 2
)

var CommandSubscribe_SubType_name = map[int32]string{
	0: "Exclusive",
	1: "Shared",
	2: "Failover",
}
var CommandSubscribe_SubType_value = map[string]int32{
	"Exclusive": 0,
	"Shared":    1,
	"Failover":  2,
}

func (x CommandSubscribe_SubType) Enum() *CommandSubscribe_SubType {
	p := new(CommandSubscribe_SubType)
	*p = x
	return p
}
func (x CommandSubscribe_SubType) String() string {
	return proto.EnumName(CommandSubscribe_SubType_name, int32(x))
}
func (x *CommandSubscribe_SubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandSubscribe_SubType_value, data, "CommandSubscribe_SubType")
	if err != nil {
		return err
	}
	*x = CommandSubscribe_SubType(value)
	return nil
}
func (CommandSubscribe_SubType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type CommandPartitionedTopicMetadataResponse_LookupType int32

const (
	CommandPartitionedTopicMetadataResponse_Success CommandPartitionedTopicMetadataResponse_LookupType = 0
	CommandPartitionedTopicMetadataResponse_Failed  CommandPartitionedTopicMetadataResponse_LookupType = 1
)

var CommandPartitionedTopicMetadataResponse_LookupType_name = map[int32]string{
	0: "Success",
	1: "Failed",
}
var CommandPartitionedTopicMetadataResponse_LookupType_value = map[string]int32{
	"Success": 0,
	"Failed":  1,
}

func (x CommandPartitionedTopicMetadataResponse_LookupType) Enum() *CommandPartitionedTopicMetadataResponse_LookupType {
	p := new(CommandPartitionedTopicMetadataResponse_LookupType)
	*p = x
	return p
}
func (x CommandPartitionedTopicMetadataResponse_LookupType) String() string {
	return proto.EnumName(CommandPartitionedTopicMetadataResponse_LookupType_name, int32(x))
}
func (x *CommandPartitionedTopicMetadataResponse_LookupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandPartitionedTopicMetadataResponse_LookupType_value, data, "CommandPartitionedTopicMetadataResponse_LookupType")
	if err != nil {
		return err
	}
	*x = CommandPartitionedTopicMetadataResponse_LookupType(value)
	return nil
}
func (CommandPartitionedTopicMetadataResponse_LookupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

type CommandLookupTopicResponse_LookupType int32

const (
	CommandLookupTopicResponse_Redirect CommandLookupTopicResponse_LookupType = 0
	CommandLookupTopicResponse_Connect  CommandLookupTopicResponse_LookupType = 1
	CommandLookupTopicResponse_Failed   CommandLookupTopicResponse_LookupType = 2
)

var CommandLookupTopicResponse_LookupType_name = map[int32]string{
	0: "Redirect",
	1: "Connect",
	2: "Failed",
}
var CommandLookupTopicResponse_LookupType_value = map[string]int32{
	"Redirect": 0,
	"Connect":  1,
	"Failed":   2,
}

func (x CommandLookupTopicResponse_LookupType) Enum() *CommandLookupTopicResponse_LookupType {
	p := new(CommandLookupTopicResponse_LookupType)
	*p = x
	return p
}
func (x CommandLookupTopicResponse_LookupType) String() string {
	return proto.EnumName(CommandLookupTopicResponse_LookupType_name, int32(x))
}
func (x *CommandLookupTopicResponse_LookupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandLookupTopicResponse_LookupType_value, data, "CommandLookupTopicResponse_LookupType")
	if err != nil {
		return err
	}
	*x = CommandLookupTopicResponse_LookupType(value)
	return nil
}
func (CommandLookupTopicResponse_LookupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type CommandAck_AckType int32

const (
	CommandAck_Individual CommandAck_AckType = 0
	CommandAck_Cumulative CommandAck_AckType = 1
)

var CommandAck_AckType_name = map[int32]string{
	0: "Individual",
	1: "Cumulative",
}
var CommandAck_AckType_value = map[string]int32{
	"Individual": 0,
	"Cumulative": 1,
}

func (x CommandAck_AckType) Enum() *CommandAck_AckType {
	p := new(CommandAck_AckType)
	*p = x
	return p
}
func (x CommandAck_AckType) String() string {
	return proto.EnumName(CommandAck_AckType_name, int32(x))
}
func (x *CommandAck_AckType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandAck_AckType_value, data, "CommandAck_AckType")
	if err != nil {
		return err
	}
	*x = CommandAck_AckType(value)
	return nil
}
func (CommandAck_AckType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

// Acks can contain a flag to indicate the consumer
// received an invalid message that got discarded
// before being passed on to the application.
type CommandAck_ValidationError int32

const (
	CommandAck_UncompressedSizeCorruption CommandAck_ValidationError = 0
	CommandAck_DecompressionError         CommandAck_ValidationError = 1
	CommandAck_ChecksumMismatch           CommandAck_ValidationError = 2
	CommandAck_BatchDeSerializeError      CommandAck_ValidationError = 3
)

var CommandAck_ValidationError_name = map[int32]string{
	0: "UncompressedSizeCorruption",
	1: "DecompressionError",
	2: "ChecksumMismatch",
	3: "BatchDeSerializeError",
}
var CommandAck_ValidationError_value = map[string]int32{
	"UncompressedSizeCorruption": 0,
	"DecompressionError":         1,
	"ChecksumMismatch":           2,
	"BatchDeSerializeError":      3,
}

func (x CommandAck_ValidationError) Enum() *CommandAck_ValidationError {
	p := new(CommandAck_ValidationError)
	*p = x
	return p
}
func (x CommandAck_ValidationError) String() string {
	return proto.EnumName(CommandAck_ValidationError_name, int32(x))
}
func (x *CommandAck_ValidationError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandAck_ValidationError_value, data, "CommandAck_ValidationError")
	if err != nil {
		return err
	}
	*x = CommandAck_ValidationError(value)
	return nil
}
func (CommandAck_ValidationError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 1}
}

type BaseCommand_Type int32

const (
	BaseCommand_CONNECT                           BaseCommand_Type = 2
	BaseCommand_CONNECTED                         BaseCommand_Type = 3
	BaseCommand_SUBSCRIBE                         BaseCommand_Type = 4
	BaseCommand_PRODUCER                          BaseCommand_Type = 5
	BaseCommand_SEND                              BaseCommand_Type = 6
	BaseCommand_SEND_RECEIPT                      BaseCommand_Type = 7
	BaseCommand_SEND_ERROR                        BaseCommand_Type = 8
	BaseCommand_MESSAGE                           BaseCommand_Type = 9
	BaseCommand_ACK                               BaseCommand_Type = 10
	BaseCommand_FLOW                              BaseCommand_Type = 11
	BaseCommand_UNSUBSCRIBE                       BaseCommand_Type = 12
	BaseCommand_SUCCESS                           BaseCommand_Type = 13
	BaseCommand_ERROR                             BaseCommand_Type = 14
	BaseCommand_CLOSE_PRODUCER                    BaseCommand_Type = 15
	BaseCommand_CLOSE_CONSUMER                    BaseCommand_Type = 16
	BaseCommand_PRODUCER_SUCCESS                  BaseCommand_Type = 17
	BaseCommand_PING                              BaseCommand_Type = 18
	BaseCommand_PONG                              BaseCommand_Type = 19
	BaseCommand_REDELIVER_UNACKNOWLEDGED_MESSAGES BaseCommand_Type = 20
	BaseCommand_PARTITIONED_METADATA              BaseCommand_Type = 21
	BaseCommand_PARTITIONED_METADATA_RESPONSE     BaseCommand_Type = 22
	BaseCommand_LOOKUP                            BaseCommand_Type = 23
	BaseCommand_LOOKUP_RESPONSE                   BaseCommand_Type = 24
	BaseCommand_CONSUMER_STATS                    BaseCommand_Type = 25
	BaseCommand_CONSUMER_STATS_RESPONSE           BaseCommand_Type = 26
)

var BaseCommand_Type_name = map[int32]string{
	2:  "CONNECT",
	3:  "CONNECTED",
	4:  "SUBSCRIBE",
	5:  "PRODUCER",
	6:  "SEND",
	7:  "SEND_RECEIPT",
	8:  "SEND_ERROR",
	9:  "MESSAGE",
	10: "ACK",
	11: "FLOW",
	12: "UNSUBSCRIBE",
	13: "SUCCESS",
	14: "ERROR",
	15: "CLOSE_PRODUCER",
	16: "CLOSE_CONSUMER",
	17: "PRODUCER_SUCCESS",
	18: "PING",
	19: "PONG",
	20: "REDELIVER_UNACKNOWLEDGED_MESSAGES",
	21: "PARTITIONED_METADATA",
	22: "PARTITIONED_METADATA_RESPONSE",
	23: "LOOKUP",
	24: "LOOKUP_RESPONSE",
	25: "CONSUMER_STATS",
	26: "CONSUMER_STATS_RESPONSE",
}
var BaseCommand_Type_value = map[string]int32{
	"CONNECT":          2,
	"CONNECTED":        3,
	"SUBSCRIBE":        4,
	"PRODUCER":         5,
	"SEND":             6,
	"SEND_RECEIPT":     7,
	"SEND_ERROR":       8,
	"MESSAGE":          9,
	"ACK":              10,
	"FLOW":             11,
	"UNSUBSCRIBE":      12,
	"SUCCESS":          13,
	"ERROR":            14,
	"CLOSE_PRODUCER":   15,
	"CLOSE_CONSUMER":   16,
	"PRODUCER_SUCCESS": 17,
	"PING":             18,
	"PONG":             19,
	"REDELIVER_UNACKNOWLEDGED_MESSAGES": 20,
	"PARTITIONED_METADATA":              21,
	"PARTITIONED_METADATA_RESPONSE":     22,
	"LOOKUP":                            23,
	"LOOKUP_RESPONSE":                   24,
	"CONSUMER_STATS":                    25,
	"CONSUMER_STATS_RESPONSE":           26,
}

func (x BaseCommand_Type) Enum() *BaseCommand_Type {
	p := new(BaseCommand_Type)
	*p = x
	return p
}
func (x BaseCommand_Type) String() string {
	return proto.EnumName(BaseCommand_Type_name, int32(x))
}
func (x *BaseCommand_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BaseCommand_Type_value, data, "BaseCommand_Type")
	if err != nil {
		return err
	}
	*x = BaseCommand_Type(value)
	return nil
}
func (BaseCommand_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

type MessageIdData struct {
	LedgerId         *uint64 `protobuf:"varint,1,req,name=ledgerId" json:"ledgerId,omitempty"`
	EntryId          *uint64 `protobuf:"varint,2,req,name=entryId" json:"entryId,omitempty"`
	Partition        *int32  `protobuf:"varint,3,opt,name=partition,def=-1" json:"partition,omitempty"`
	BatchIndex       *int32  `protobuf:"varint,4,opt,name=batch_index,json=batchIndex,def=-1" json:"batch_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageIdData) Reset()                    { *m = MessageIdData{} }
func (m *MessageIdData) String() string            { return proto.CompactTextString(m) }
func (*MessageIdData) ProtoMessage()               {}
func (*MessageIdData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_MessageIdData_Partition int32 = -1
const Default_MessageIdData_BatchIndex int32 = -1

func (m *MessageIdData) GetLedgerId() uint64 {
	if m != nil && m.LedgerId != nil {
		return *m.LedgerId
	}
	return 0
}

func (m *MessageIdData) GetEntryId() uint64 {
	if m != nil && m.EntryId != nil {
		return *m.EntryId
	}
	return 0
}

func (m *MessageIdData) GetPartition() int32 {
	if m != nil && m.Partition != nil {
		return *m.Partition
	}
	return Default_MessageIdData_Partition
}

func (m *MessageIdData) GetBatchIndex() int32 {
	if m != nil && m.BatchIndex != nil {
		return *m.BatchIndex
	}
	return Default_MessageIdData_BatchIndex
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type MessageMetadata struct {
	ProducerName *string     `protobuf:"bytes,1,req,name=producer_name,json=producerName" json:"producer_name,omitempty"`
	SequenceId   *uint64     `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	PublishTime  *uint64     `protobuf:"varint,3,req,name=publish_time,json=publishTime" json:"publish_time,omitempty"`
	Properties   []*KeyValue `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
	// Property set on replicated message,
	// includes the source cluster name
	ReplicatedFrom *string `protobuf:"bytes,5,opt,name=replicated_from,json=replicatedFrom" json:"replicated_from,omitempty"`
	// key to decide partition for the msg
	PartitionKey *string `protobuf:"bytes,6,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	// Override namespace's replication
	ReplicateTo      []string         `protobuf:"bytes,7,rep,name=replicate_to,json=replicateTo" json:"replicate_to,omitempty"`
	Compression      *CompressionType `protobuf:"varint,8,opt,name=compression,enum=pulsar.proto.CompressionType,def=0" json:"compression,omitempty"`
	UncompressedSize *uint32          `protobuf:"varint,9,opt,name=uncompressed_size,json=uncompressedSize,def=0" json:"uncompressed_size,omitempty"`
	// Removed below checksum field from Metadata as
	// it should be part of send-command which keeps checksum of header + payload
	// optional sfixed64 checksum = 10;
	// differentiate single and batch message metadata
	NumMessagesInBatch *int32 `protobuf:"varint,11,opt,name=num_messages_in_batch,json=numMessagesInBatch,def=1" json:"num_messages_in_batch,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *MessageMetadata) Reset()                    { *m = MessageMetadata{} }
func (m *MessageMetadata) String() string            { return proto.CompactTextString(m) }
func (*MessageMetadata) ProtoMessage()               {}
func (*MessageMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_MessageMetadata_Compression CompressionType = CompressionType_NONE
const Default_MessageMetadata_UncompressedSize uint32 = 0
const Default_MessageMetadata_NumMessagesInBatch int32 = 1

func (m *MessageMetadata) GetProducerName() string {
	if m != nil && m.ProducerName != nil {
		return *m.ProducerName
	}
	return ""
}

func (m *MessageMetadata) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *MessageMetadata) GetPublishTime() uint64 {
	if m != nil && m.PublishTime != nil {
		return *m.PublishTime
	}
	return 0
}

func (m *MessageMetadata) GetProperties() []*KeyValue {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *MessageMetadata) GetReplicatedFrom() string {
	if m != nil && m.ReplicatedFrom != nil {
		return *m.ReplicatedFrom
	}
	return ""
}

func (m *MessageMetadata) GetPartitionKey() string {
	if m != nil && m.PartitionKey != nil {
		return *m.PartitionKey
	}
	return ""
}

func (m *MessageMetadata) GetReplicateTo() []string {
	if m != nil {
		return m.ReplicateTo
	}
	return nil
}

func (m *MessageMetadata) GetCompression() CompressionType {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return Default_MessageMetadata_Compression
}

func (m *MessageMetadata) GetUncompressedSize() uint32 {
	if m != nil && m.UncompressedSize != nil {
		return *m.UncompressedSize
	}
	return Default_MessageMetadata_UncompressedSize
}

func (m *MessageMetadata) GetNumMessagesInBatch() int32 {
	if m != nil && m.NumMessagesInBatch != nil {
		return *m.NumMessagesInBatch
	}
	return Default_MessageMetadata_NumMessagesInBatch
}

type SingleMessageMetadata struct {
	Properties       []*KeyValue `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
	PartitionKey     *string     `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	PayloadSize      *int32      `protobuf:"varint,3,req,name=payload_size,json=payloadSize" json:"payload_size,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SingleMessageMetadata) Reset()                    { *m = SingleMessageMetadata{} }
func (m *SingleMessageMetadata) String() string            { return proto.CompactTextString(m) }
func (*SingleMessageMetadata) ProtoMessage()               {}
func (*SingleMessageMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SingleMessageMetadata) GetProperties() []*KeyValue {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *SingleMessageMetadata) GetPartitionKey() string {
	if m != nil && m.PartitionKey != nil {
		return *m.PartitionKey
	}
	return ""
}

func (m *SingleMessageMetadata) GetPayloadSize() int32 {
	if m != nil && m.PayloadSize != nil {
		return *m.PayloadSize
	}
	return 0
}

type CommandConnect struct {
	ClientVersion    *string     `protobuf:"bytes,1,req,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	AuthMethod       *AuthMethod `protobuf:"varint,2,opt,name=auth_method,json=authMethod,enum=pulsar.proto.AuthMethod" json:"auth_method,omitempty"`
	AuthMethodName   *string     `protobuf:"bytes,5,opt,name=auth_method_name,json=authMethodName" json:"auth_method_name,omitempty"`
	AuthData         []byte      `protobuf:"bytes,3,opt,name=auth_data,json=authData" json:"auth_data,omitempty"`
	ProtocolVersion  *int32      `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CommandConnect) Reset()                    { *m = CommandConnect{} }
func (m *CommandConnect) String() string            { return proto.CompactTextString(m) }
func (*CommandConnect) ProtoMessage()               {}
func (*CommandConnect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

const Default_CommandConnect_ProtocolVersion int32 = 0

func (m *CommandConnect) GetClientVersion() string {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return ""
}

func (m *CommandConnect) GetAuthMethod() AuthMethod {
	if m != nil && m.AuthMethod != nil {
		return *m.AuthMethod
	}
	return AuthMethod_AuthMethodNone
}

func (m *CommandConnect) GetAuthMethodName() string {
	if m != nil && m.AuthMethodName != nil {
		return *m.AuthMethodName
	}
	return ""
}

func (m *CommandConnect) GetAuthData() []byte {
	if m != nil {
		return m.AuthData
	}
	return nil
}

func (m *CommandConnect) GetProtocolVersion() int32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return Default_CommandConnect_ProtocolVersion
}

type CommandConnected struct {
	ServerVersion    *string `protobuf:"bytes,1,req,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	ProtocolVersion  *int32  `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandConnected) Reset()                    { *m = CommandConnected{} }
func (m *CommandConnected) String() string            { return proto.CompactTextString(m) }
func (*CommandConnected) ProtoMessage()               {}
func (*CommandConnected) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

const Default_CommandConnected_ProtocolVersion int32 = 0

func (m *CommandConnected) GetServerVersion() string {
	if m != nil && m.ServerVersion != nil {
		return *m.ServerVersion
	}
	return ""
}

func (m *CommandConnected) GetProtocolVersion() int32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return Default_CommandConnected_ProtocolVersion
}

type CommandSubscribe struct {
	Topic         *string                   `protobuf:"bytes,1,req,name=topic" json:"topic,omitempty"`
	Subscription  *string                   `protobuf:"bytes,2,req,name=subscription" json:"subscription,omitempty"`
	SubType       *CommandSubscribe_SubType `protobuf:"varint,3,req,name=subType,enum=pulsar.proto.CommandSubscribe_SubType" json:"subType,omitempty"`
	ConsumerId    *uint64                   `protobuf:"varint,4,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	RequestId     *uint64                   `protobuf:"varint,5,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	ConsumerName  *string                   `protobuf:"bytes,6,opt,name=consumer_name,json=consumerName" json:"consumer_name,omitempty"`
	PriorityLevel *int32                    `protobuf:"varint,7,opt,name=priority_level,json=priorityLevel" json:"priority_level,omitempty"`
	// Signal wether the subscription should be backed by a
	// durable cursor or not
	Durable *bool `protobuf:"varint,8,opt,name=durable,def=1" json:"durable,omitempty"`
	// If specified, the subscription will position the cursor
	// markd-delete position  on the particular message id and
	// will send messages from that point
	StartMessageId   *MessageIdData `protobuf:"bytes,9,opt,name=start_message_id,json=startMessageId" json:"start_message_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CommandSubscribe) Reset()                    { *m = CommandSubscribe{} }
func (m *CommandSubscribe) String() string            { return proto.CompactTextString(m) }
func (*CommandSubscribe) ProtoMessage()               {}
func (*CommandSubscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_CommandSubscribe_Durable bool = true

func (m *CommandSubscribe) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *CommandSubscribe) GetSubscription() string {
	if m != nil && m.Subscription != nil {
		return *m.Subscription
	}
	return ""
}

func (m *CommandSubscribe) GetSubType() CommandSubscribe_SubType {
	if m != nil && m.SubType != nil {
		return *m.SubType
	}
	return CommandSubscribe_Exclusive
}

func (m *CommandSubscribe) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandSubscribe) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandSubscribe) GetConsumerName() string {
	if m != nil && m.ConsumerName != nil {
		return *m.ConsumerName
	}
	return ""
}

func (m *CommandSubscribe) GetPriorityLevel() int32 {
	if m != nil && m.PriorityLevel != nil {
		return *m.PriorityLevel
	}
	return 0
}

func (m *CommandSubscribe) GetDurable() bool {
	if m != nil && m.Durable != nil {
		return *m.Durable
	}
	return Default_CommandSubscribe_Durable
}

func (m *CommandSubscribe) GetStartMessageId() *MessageIdData {
	if m != nil {
		return m.StartMessageId
	}
	return nil
}

type CommandPartitionedTopicMetadata struct {
	Topic            *string `protobuf:"bytes,1,req,name=topic" json:"topic,omitempty"`
	RequestId        *uint64 `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandPartitionedTopicMetadata) Reset()                    { *m = CommandPartitionedTopicMetadata{} }
func (m *CommandPartitionedTopicMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommandPartitionedTopicMetadata) ProtoMessage()               {}
func (*CommandPartitionedTopicMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommandPartitionedTopicMetadata) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *CommandPartitionedTopicMetadata) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

type CommandPartitionedTopicMetadataResponse struct {
	Partitions       *uint32                                             `protobuf:"varint,1,opt,name=partitions" json:"partitions,omitempty"`
	RequestId        *uint64                                             `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Response         *CommandPartitionedTopicMetadataResponse_LookupType `protobuf:"varint,3,opt,name=response,enum=pulsar.proto.CommandPartitionedTopicMetadataResponse_LookupType" json:"response,omitempty"`
	Error            *ServerError                                        `protobuf:"varint,4,opt,name=error,enum=pulsar.proto.ServerError" json:"error,omitempty"`
	Message          *string                                             `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte                                              `json:"-"`
}

func (m *CommandPartitionedTopicMetadataResponse) Reset() {
	*m = CommandPartitionedTopicMetadataResponse{}
}
func (m *CommandPartitionedTopicMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*CommandPartitionedTopicMetadataResponse) ProtoMessage()    {}
func (*CommandPartitionedTopicMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8}
}

func (m *CommandPartitionedTopicMetadataResponse) GetPartitions() uint32 {
	if m != nil && m.Partitions != nil {
		return *m.Partitions
	}
	return 0
}

func (m *CommandPartitionedTopicMetadataResponse) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandPartitionedTopicMetadataResponse) GetResponse() CommandPartitionedTopicMetadataResponse_LookupType {
	if m != nil && m.Response != nil {
		return *m.Response
	}
	return CommandPartitionedTopicMetadataResponse_Success
}

func (m *CommandPartitionedTopicMetadataResponse) GetError() ServerError {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ServerError_UnknownError
}

func (m *CommandPartitionedTopicMetadataResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CommandLookupTopic struct {
	Topic            *string `protobuf:"bytes,1,req,name=topic" json:"topic,omitempty"`
	RequestId        *uint64 `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Authoritative    *bool   `protobuf:"varint,3,opt,name=authoritative,def=0" json:"authoritative,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandLookupTopic) Reset()                    { *m = CommandLookupTopic{} }
func (m *CommandLookupTopic) String() string            { return proto.CompactTextString(m) }
func (*CommandLookupTopic) ProtoMessage()               {}
func (*CommandLookupTopic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

const Default_CommandLookupTopic_Authoritative bool = false

func (m *CommandLookupTopic) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *CommandLookupTopic) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandLookupTopic) GetAuthoritative() bool {
	if m != nil && m.Authoritative != nil {
		return *m.Authoritative
	}
	return Default_CommandLookupTopic_Authoritative
}

type CommandLookupTopicResponse struct {
	BrokerServiceUrl    *string                                `protobuf:"bytes,1,opt,name=brokerServiceUrl" json:"brokerServiceUrl,omitempty"`
	BrokerServiceUrlTls *string                                `protobuf:"bytes,2,opt,name=brokerServiceUrlTls" json:"brokerServiceUrlTls,omitempty"`
	Response            *CommandLookupTopicResponse_LookupType `protobuf:"varint,3,opt,name=response,enum=pulsar.proto.CommandLookupTopicResponse_LookupType" json:"response,omitempty"`
	RequestId           *uint64                                `protobuf:"varint,4,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Authoritative       *bool                                  `protobuf:"varint,5,opt,name=authoritative,def=0" json:"authoritative,omitempty"`
	Error               *ServerError                           `protobuf:"varint,6,opt,name=error,enum=pulsar.proto.ServerError" json:"error,omitempty"`
	Message             *string                                `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized    []byte                                 `json:"-"`
}

func (m *CommandLookupTopicResponse) Reset()                    { *m = CommandLookupTopicResponse{} }
func (m *CommandLookupTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandLookupTopicResponse) ProtoMessage()               {}
func (*CommandLookupTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

const Default_CommandLookupTopicResponse_Authoritative bool = false

func (m *CommandLookupTopicResponse) GetBrokerServiceUrl() string {
	if m != nil && m.BrokerServiceUrl != nil {
		return *m.BrokerServiceUrl
	}
	return ""
}

func (m *CommandLookupTopicResponse) GetBrokerServiceUrlTls() string {
	if m != nil && m.BrokerServiceUrlTls != nil {
		return *m.BrokerServiceUrlTls
	}
	return ""
}

func (m *CommandLookupTopicResponse) GetResponse() CommandLookupTopicResponse_LookupType {
	if m != nil && m.Response != nil {
		return *m.Response
	}
	return CommandLookupTopicResponse_Redirect
}

func (m *CommandLookupTopicResponse) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandLookupTopicResponse) GetAuthoritative() bool {
	if m != nil && m.Authoritative != nil {
		return *m.Authoritative
	}
	return Default_CommandLookupTopicResponse_Authoritative
}

func (m *CommandLookupTopicResponse) GetError() ServerError {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ServerError_UnknownError
}

func (m *CommandLookupTopicResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// / Create a new Producer on a topic, assigning the given producer_id,
// / all messages sent with this producer_id will be persisted on the topic
type CommandProducer struct {
	Topic      *string `protobuf:"bytes,1,req,name=topic" json:"topic,omitempty"`
	ProducerId *uint64 `protobuf:"varint,2,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	RequestId  *uint64 `protobuf:"varint,3,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// / If a producer name is specified, the name will be used,
	// / otherwise the broker will generate a unique name
	ProducerName     *string `protobuf:"bytes,4,opt,name=producer_name,json=producerName" json:"producer_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandProducer) Reset()                    { *m = CommandProducer{} }
func (m *CommandProducer) String() string            { return proto.CompactTextString(m) }
func (*CommandProducer) ProtoMessage()               {}
func (*CommandProducer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommandProducer) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *CommandProducer) GetProducerId() uint64 {
	if m != nil && m.ProducerId != nil {
		return *m.ProducerId
	}
	return 0
}

func (m *CommandProducer) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandProducer) GetProducerName() string {
	if m != nil && m.ProducerName != nil {
		return *m.ProducerName
	}
	return ""
}

type CommandSend struct {
	ProducerId       *uint64 `protobuf:"varint,1,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	SequenceId       *uint64 `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	NumMessages      *int32  `protobuf:"varint,3,opt,name=num_messages,json=numMessages,def=1" json:"num_messages,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandSend) Reset()                    { *m = CommandSend{} }
func (m *CommandSend) String() string            { return proto.CompactTextString(m) }
func (*CommandSend) ProtoMessage()               {}
func (*CommandSend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

const Default_CommandSend_NumMessages int32 = 1

func (m *CommandSend) GetProducerId() uint64 {
	if m != nil && m.ProducerId != nil {
		return *m.ProducerId
	}
	return 0
}

func (m *CommandSend) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CommandSend) GetNumMessages() int32 {
	if m != nil && m.NumMessages != nil {
		return *m.NumMessages
	}
	return Default_CommandSend_NumMessages
}

type CommandSendReceipt struct {
	ProducerId       *uint64        `protobuf:"varint,1,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	SequenceId       *uint64        `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	MessageId        *MessageIdData `protobuf:"bytes,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CommandSendReceipt) Reset()                    { *m = CommandSendReceipt{} }
func (m *CommandSendReceipt) String() string            { return proto.CompactTextString(m) }
func (*CommandSendReceipt) ProtoMessage()               {}
func (*CommandSendReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CommandSendReceipt) GetProducerId() uint64 {
	if m != nil && m.ProducerId != nil {
		return *m.ProducerId
	}
	return 0
}

func (m *CommandSendReceipt) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CommandSendReceipt) GetMessageId() *MessageIdData {
	if m != nil {
		return m.MessageId
	}
	return nil
}

type CommandSendError struct {
	ProducerId       *uint64      `protobuf:"varint,1,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	SequenceId       *uint64      `protobuf:"varint,2,req,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Error            *ServerError `protobuf:"varint,3,req,name=error,enum=pulsar.proto.ServerError" json:"error,omitempty"`
	Message          *string      `protobuf:"bytes,4,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CommandSendError) Reset()                    { *m = CommandSendError{} }
func (m *CommandSendError) String() string            { return proto.CompactTextString(m) }
func (*CommandSendError) ProtoMessage()               {}
func (*CommandSendError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CommandSendError) GetProducerId() uint64 {
	if m != nil && m.ProducerId != nil {
		return *m.ProducerId
	}
	return 0
}

func (m *CommandSendError) GetSequenceId() uint64 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CommandSendError) GetError() ServerError {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ServerError_UnknownError
}

func (m *CommandSendError) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CommandMessage struct {
	ConsumerId       *uint64        `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	MessageId        *MessageIdData `protobuf:"bytes,2,req,name=message_id,json=messageId" json:"message_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CommandMessage) Reset()                    { *m = CommandMessage{} }
func (m *CommandMessage) String() string            { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()               {}
func (*CommandMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CommandMessage) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandMessage) GetMessageId() *MessageIdData {
	if m != nil {
		return m.MessageId
	}
	return nil
}

type CommandAck struct {
	ConsumerId       *uint64                     `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	AckType          *CommandAck_AckType         `protobuf:"varint,2,req,name=ack_type,json=ackType,enum=pulsar.proto.CommandAck_AckType" json:"ack_type,omitempty"`
	MessageId        *MessageIdData              `protobuf:"bytes,3,req,name=message_id,json=messageId" json:"message_id,omitempty"`
	ValidationError  *CommandAck_ValidationError `protobuf:"varint,4,opt,name=validation_error,json=validationError,enum=pulsar.proto.CommandAck_ValidationError" json:"validation_error,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CommandAck) Reset()                    { *m = CommandAck{} }
func (m *CommandAck) String() string            { return proto.CompactTextString(m) }
func (*CommandAck) ProtoMessage()               {}
func (*CommandAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CommandAck) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandAck) GetAckType() CommandAck_AckType {
	if m != nil && m.AckType != nil {
		return *m.AckType
	}
	return CommandAck_Individual
}

func (m *CommandAck) GetMessageId() *MessageIdData {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *CommandAck) GetValidationError() CommandAck_ValidationError {
	if m != nil && m.ValidationError != nil {
		return *m.ValidationError
	}
	return CommandAck_UncompressedSizeCorruption
}

type CommandFlow struct {
	ConsumerId *uint64 `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	// Max number of messages to prefetch, in addition
	// of any number previously specified
	MessagePermits   *uint32 `protobuf:"varint,2,req,name=messagePermits" json:"messagePermits,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandFlow) Reset()                    { *m = CommandFlow{} }
func (m *CommandFlow) String() string            { return proto.CompactTextString(m) }
func (*CommandFlow) ProtoMessage()               {}
func (*CommandFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CommandFlow) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandFlow) GetMessagePermits() uint32 {
	if m != nil && m.MessagePermits != nil {
		return *m.MessagePermits
	}
	return 0
}

type CommandUnsubscribe struct {
	ConsumerId       *uint64 `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	RequestId        *uint64 `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandUnsubscribe) Reset()                    { *m = CommandUnsubscribe{} }
func (m *CommandUnsubscribe) String() string            { return proto.CompactTextString(m) }
func (*CommandUnsubscribe) ProtoMessage()               {}
func (*CommandUnsubscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CommandUnsubscribe) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandUnsubscribe) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

type CommandCloseProducer struct {
	ProducerId       *uint64 `protobuf:"varint,1,req,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	RequestId        *uint64 `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandCloseProducer) Reset()                    { *m = CommandCloseProducer{} }
func (m *CommandCloseProducer) String() string            { return proto.CompactTextString(m) }
func (*CommandCloseProducer) ProtoMessage()               {}
func (*CommandCloseProducer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CommandCloseProducer) GetProducerId() uint64 {
	if m != nil && m.ProducerId != nil {
		return *m.ProducerId
	}
	return 0
}

func (m *CommandCloseProducer) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

type CommandCloseConsumer struct {
	ConsumerId       *uint64 `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	RequestId        *uint64 `protobuf:"varint,2,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandCloseConsumer) Reset()                    { *m = CommandCloseConsumer{} }
func (m *CommandCloseConsumer) String() string            { return proto.CompactTextString(m) }
func (*CommandCloseConsumer) ProtoMessage()               {}
func (*CommandCloseConsumer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CommandCloseConsumer) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandCloseConsumer) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

type CommandRedeliverUnacknowledgedMessages struct {
	ConsumerId       *uint64          `protobuf:"varint,1,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	MessageIds       []*MessageIdData `protobuf:"bytes,2,rep,name=message_ids,json=messageIds" json:"message_ids,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CommandRedeliverUnacknowledgedMessages) Reset() {
	*m = CommandRedeliverUnacknowledgedMessages{}
}
func (m *CommandRedeliverUnacknowledgedMessages) String() string { return proto.CompactTextString(m) }
func (*CommandRedeliverUnacknowledgedMessages) ProtoMessage()    {}
func (*CommandRedeliverUnacknowledgedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *CommandRedeliverUnacknowledgedMessages) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

func (m *CommandRedeliverUnacknowledgedMessages) GetMessageIds() []*MessageIdData {
	if m != nil {
		return m.MessageIds
	}
	return nil
}

type CommandSuccess struct {
	RequestId        *uint64 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandSuccess) Reset()                    { *m = CommandSuccess{} }
func (m *CommandSuccess) String() string            { return proto.CompactTextString(m) }
func (*CommandSuccess) ProtoMessage()               {}
func (*CommandSuccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CommandSuccess) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

// / Response from CommandProducer
type CommandProducerSuccess struct {
	RequestId        *uint64 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	ProducerName     *string `protobuf:"bytes,2,req,name=producer_name,json=producerName" json:"producer_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandProducerSuccess) Reset()                    { *m = CommandProducerSuccess{} }
func (m *CommandProducerSuccess) String() string            { return proto.CompactTextString(m) }
func (*CommandProducerSuccess) ProtoMessage()               {}
func (*CommandProducerSuccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CommandProducerSuccess) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandProducerSuccess) GetProducerName() string {
	if m != nil && m.ProducerName != nil {
		return *m.ProducerName
	}
	return ""
}

type CommandError struct {
	RequestId        *uint64      `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Error            *ServerError `protobuf:"varint,2,req,name=error,enum=pulsar.proto.ServerError" json:"error,omitempty"`
	Message          *string      `protobuf:"bytes,3,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CommandError) Reset()                    { *m = CommandError{} }
func (m *CommandError) String() string            { return proto.CompactTextString(m) }
func (*CommandError) ProtoMessage()               {}
func (*CommandError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CommandError) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandError) GetError() ServerError {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ServerError_UnknownError
}

func (m *CommandError) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// Commands to probe the state of connection.
// When either client or broker doesn't receive commands for certain
// amount of time, they will send a Ping probe.
type CommandPing struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommandPing) Reset()                    { *m = CommandPing{} }
func (m *CommandPing) String() string            { return proto.CompactTextString(m) }
func (*CommandPing) ProtoMessage()               {}
func (*CommandPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type CommandPong struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommandPong) Reset()                    { *m = CommandPong{} }
func (m *CommandPong) String() string            { return proto.CompactTextString(m) }
func (*CommandPong) ProtoMessage()               {}
func (*CommandPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type CommandConsumerStats struct {
	RequestId *uint64 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// required string topic_name         = 2;
	// required string subscription_name  = 3;
	ConsumerId       *uint64 `protobuf:"varint,4,req,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandConsumerStats) Reset()                    { *m = CommandConsumerStats{} }
func (m *CommandConsumerStats) String() string            { return proto.CompactTextString(m) }
func (*CommandConsumerStats) ProtoMessage()               {}
func (*CommandConsumerStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CommandConsumerStats) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandConsumerStats) GetConsumerId() uint64 {
	if m != nil && m.ConsumerId != nil {
		return *m.ConsumerId
	}
	return 0
}

type CommandConsumerStatsResponse struct {
	RequestId    *uint64      `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	ErrorCode    *ServerError `protobuf:"varint,2,opt,name=error_code,json=errorCode,enum=pulsar.proto.ServerError" json:"error_code,omitempty"`
	ErrorMessage *string      `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// / Total rate of messages delivered to the consumer. msg/s
	MsgRateOut *float64 `protobuf:"fixed64,4,opt,name=msgRateOut" json:"msgRateOut,omitempty"`
	// / Total throughput delivered to the consumer. bytes/s
	MsgThroughputOut *float64 `protobuf:"fixed64,5,opt,name=msgThroughputOut" json:"msgThroughputOut,omitempty"`
	// / Total rate of messages redelivered by this consumer. msg/s
	MsgRateRedeliver *float64 `protobuf:"fixed64,6,opt,name=msgRateRedeliver" json:"msgRateRedeliver,omitempty"`
	// / Name of the consumer
	ConsumerName *string `protobuf:"bytes,7,opt,name=consumerName" json:"consumerName,omitempty"`
	// / Number of available message permits for the consumer
	AvailablePermits *uint64 `protobuf:"varint,8,opt,name=availablePermits" json:"availablePermits,omitempty"`
	// / Number of unacknowledged messages for the consumer
	UnackedMessages *uint64 `protobuf:"varint,9,opt,name=unackedMessages" json:"unackedMessages,omitempty"`
	// / Flag to verify if consumer is blocked due to reaching threshold of unacked messages
	BlockedConsumerOnUnackedMsgs *bool `protobuf:"varint,10,opt,name=blockedConsumerOnUnackedMsgs" json:"blockedConsumerOnUnackedMsgs,omitempty"`
	// / Address of this consumer
	Address *string `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	// / Timestamp of connection
	ConnectedSince *string `protobuf:"bytes,12,opt,name=connectedSince" json:"connectedSince,omitempty"`
	// / Whether this subscription is Exclusive or Shared or Failover
	Type *string `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
	// / Total rate of messages expired on this subscription. msg/s
	MsgRateExpired *float64 `protobuf:"fixed64,14,opt,name=msgRateExpired" json:"msgRateExpired,omitempty"`
	// / Number of messages in the subscription backlog
	MsgBacklog       *uint64 `protobuf:"varint,15,opt,name=msgBacklog" json:"msgBacklog,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandConsumerStatsResponse) Reset()                    { *m = CommandConsumerStatsResponse{} }
func (m *CommandConsumerStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandConsumerStatsResponse) ProtoMessage()               {}
func (*CommandConsumerStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CommandConsumerStatsResponse) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetErrorCode() ServerError {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return ServerError_UnknownError
}

func (m *CommandConsumerStatsResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *CommandConsumerStatsResponse) GetMsgRateOut() float64 {
	if m != nil && m.MsgRateOut != nil {
		return *m.MsgRateOut
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetMsgThroughputOut() float64 {
	if m != nil && m.MsgThroughputOut != nil {
		return *m.MsgThroughputOut
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetMsgRateRedeliver() float64 {
	if m != nil && m.MsgRateRedeliver != nil {
		return *m.MsgRateRedeliver
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetConsumerName() string {
	if m != nil && m.ConsumerName != nil {
		return *m.ConsumerName
	}
	return ""
}

func (m *CommandConsumerStatsResponse) GetAvailablePermits() uint64 {
	if m != nil && m.AvailablePermits != nil {
		return *m.AvailablePermits
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetUnackedMessages() uint64 {
	if m != nil && m.UnackedMessages != nil {
		return *m.UnackedMessages
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetBlockedConsumerOnUnackedMsgs() bool {
	if m != nil && m.BlockedConsumerOnUnackedMsgs != nil {
		return *m.BlockedConsumerOnUnackedMsgs
	}
	return false
}

func (m *CommandConsumerStatsResponse) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *CommandConsumerStatsResponse) GetConnectedSince() string {
	if m != nil && m.ConnectedSince != nil {
		return *m.ConnectedSince
	}
	return ""
}

func (m *CommandConsumerStatsResponse) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *CommandConsumerStatsResponse) GetMsgRateExpired() float64 {
	if m != nil && m.MsgRateExpired != nil {
		return *m.MsgRateExpired
	}
	return 0
}

func (m *CommandConsumerStatsResponse) GetMsgBacklog() uint64 {
	if m != nil && m.MsgBacklog != nil {
		return *m.MsgBacklog
	}
	return 0
}

type BaseCommand struct {
	Type                            *BaseCommand_Type                        `protobuf:"varint,1,req,name=type,enum=pulsar.proto.BaseCommand_Type" json:"type,omitempty"`
	Connect                         *CommandConnect                          `protobuf:"bytes,2,opt,name=connect" json:"connect,omitempty"`
	Connected                       *CommandConnected                        `protobuf:"bytes,3,opt,name=connected" json:"connected,omitempty"`
	Subscribe                       *CommandSubscribe                        `protobuf:"bytes,4,opt,name=subscribe" json:"subscribe,omitempty"`
	Producer                        *CommandProducer                         `protobuf:"bytes,5,opt,name=producer" json:"producer,omitempty"`
	Send                            *CommandSend                             `protobuf:"bytes,6,opt,name=send" json:"send,omitempty"`
	SendReceipt                     *CommandSendReceipt                      `protobuf:"bytes,7,opt,name=send_receipt,json=sendReceipt" json:"send_receipt,omitempty"`
	SendError                       *CommandSendError                        `protobuf:"bytes,8,opt,name=send_error,json=sendError" json:"send_error,omitempty"`
	Message                         *CommandMessage                          `protobuf:"bytes,9,opt,name=message" json:"message,omitempty"`
	Ack                             *CommandAck                              `protobuf:"bytes,10,opt,name=ack" json:"ack,omitempty"`
	Flow                            *CommandFlow                             `protobuf:"bytes,11,opt,name=flow" json:"flow,omitempty"`
	Unsubscribe                     *CommandUnsubscribe                      `protobuf:"bytes,12,opt,name=unsubscribe" json:"unsubscribe,omitempty"`
	Success                         *CommandSuccess                          `protobuf:"bytes,13,opt,name=success" json:"success,omitempty"`
	Error                           *CommandError                            `protobuf:"bytes,14,opt,name=error" json:"error,omitempty"`
	CloseProducer                   *CommandCloseProducer                    `protobuf:"bytes,15,opt,name=close_producer,json=closeProducer" json:"close_producer,omitempty"`
	CloseConsumer                   *CommandCloseConsumer                    `protobuf:"bytes,16,opt,name=close_consumer,json=closeConsumer" json:"close_consumer,omitempty"`
	ProducerSuccess                 *CommandProducerSuccess                  `protobuf:"bytes,17,opt,name=producer_success,json=producerSuccess" json:"producer_success,omitempty"`
	Ping                            *CommandPing                             `protobuf:"bytes,18,opt,name=ping" json:"ping,omitempty"`
	Pong                            *CommandPong                             `protobuf:"bytes,19,opt,name=pong" json:"pong,omitempty"`
	RedeliverUnacknowledgedMessages *CommandRedeliverUnacknowledgedMessages  `protobuf:"bytes,20,opt,name=redeliverUnacknowledgedMessages" json:"redeliverUnacknowledgedMessages,omitempty"`
	PartitionMetadata               *CommandPartitionedTopicMetadata         `protobuf:"bytes,21,opt,name=partitionMetadata" json:"partitionMetadata,omitempty"`
	PartitionMetadataResponse       *CommandPartitionedTopicMetadataResponse `protobuf:"bytes,22,opt,name=partitionMetadataResponse" json:"partitionMetadataResponse,omitempty"`
	LookupTopic                     *CommandLookupTopic                      `protobuf:"bytes,23,opt,name=lookupTopic" json:"lookupTopic,omitempty"`
	LookupTopicResponse             *CommandLookupTopicResponse              `protobuf:"bytes,24,opt,name=lookupTopicResponse" json:"lookupTopicResponse,omitempty"`
	ConsumerStats                   *CommandConsumerStats                    `protobuf:"bytes,25,opt,name=consumerStats" json:"consumerStats,omitempty"`
	ConsumerStatsResponse           *CommandConsumerStatsResponse            `protobuf:"bytes,26,opt,name=consumerStatsResponse" json:"consumerStatsResponse,omitempty"`
	XXX_unrecognized                []byte                                   `json:"-"`
}

func (m *BaseCommand) Reset()                    { *m = BaseCommand{} }
func (m *BaseCommand) String() string            { return proto.CompactTextString(m) }
func (*BaseCommand) ProtoMessage()               {}
func (*BaseCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BaseCommand) GetType() BaseCommand_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return BaseCommand_CONNECT
}

func (m *BaseCommand) GetConnect() *CommandConnect {
	if m != nil {
		return m.Connect
	}
	return nil
}

func (m *BaseCommand) GetConnected() *CommandConnected {
	if m != nil {
		return m.Connected
	}
	return nil
}

func (m *BaseCommand) GetSubscribe() *CommandSubscribe {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

func (m *BaseCommand) GetProducer() *CommandProducer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *BaseCommand) GetSend() *CommandSend {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *BaseCommand) GetSendReceipt() *CommandSendReceipt {
	if m != nil {
		return m.SendReceipt
	}
	return nil
}

func (m *BaseCommand) GetSendError() *CommandSendError {
	if m != nil {
		return m.SendError
	}
	return nil
}

func (m *BaseCommand) GetMessage() *CommandMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *BaseCommand) GetAck() *CommandAck {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *BaseCommand) GetFlow() *CommandFlow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *BaseCommand) GetUnsubscribe() *CommandUnsubscribe {
	if m != nil {
		return m.Unsubscribe
	}
	return nil
}

func (m *BaseCommand) GetSuccess() *CommandSuccess {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *BaseCommand) GetError() *CommandError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BaseCommand) GetCloseProducer() *CommandCloseProducer {
	if m != nil {
		return m.CloseProducer
	}
	return nil
}

func (m *BaseCommand) GetCloseConsumer() *CommandCloseConsumer {
	if m != nil {
		return m.CloseConsumer
	}
	return nil
}

func (m *BaseCommand) GetProducerSuccess() *CommandProducerSuccess {
	if m != nil {
		return m.ProducerSuccess
	}
	return nil
}

func (m *BaseCommand) GetPing() *CommandPing {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *BaseCommand) GetPong() *CommandPong {
	if m != nil {
		return m.Pong
	}
	return nil
}

func (m *BaseCommand) GetRedeliverUnacknowledgedMessages() *CommandRedeliverUnacknowledgedMessages {
	if m != nil {
		return m.RedeliverUnacknowledgedMessages
	}
	return nil
}

func (m *BaseCommand) GetPartitionMetadata() *CommandPartitionedTopicMetadata {
	if m != nil {
		return m.PartitionMetadata
	}
	return nil
}

func (m *BaseCommand) GetPartitionMetadataResponse() *CommandPartitionedTopicMetadataResponse {
	if m != nil {
		return m.PartitionMetadataResponse
	}
	return nil
}

func (m *BaseCommand) GetLookupTopic() *CommandLookupTopic {
	if m != nil {
		return m.LookupTopic
	}
	return nil
}

func (m *BaseCommand) GetLookupTopicResponse() *CommandLookupTopicResponse {
	if m != nil {
		return m.LookupTopicResponse
	}
	return nil
}

func (m *BaseCommand) GetConsumerStats() *CommandConsumerStats {
	if m != nil {
		return m.ConsumerStats
	}
	return nil
}

func (m *BaseCommand) GetConsumerStatsResponse() *CommandConsumerStatsResponse {
	if m != nil {
		return m.ConsumerStatsResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageIdData)(nil), "pulsar.proto.MessageIdData")
	proto.RegisterType((*KeyValue)(nil), "pulsar.proto.KeyValue")
	proto.RegisterType((*MessageMetadata)(nil), "pulsar.proto.MessageMetadata")
	proto.RegisterType((*SingleMessageMetadata)(nil), "pulsar.proto.SingleMessageMetadata")
	proto.RegisterType((*CommandConnect)(nil), "pulsar.proto.CommandConnect")
	proto.RegisterType((*CommandConnected)(nil), "pulsar.proto.CommandConnected")
	proto.RegisterType((*CommandSubscribe)(nil), "pulsar.proto.CommandSubscribe")
	proto.RegisterType((*CommandPartitionedTopicMetadata)(nil), "pulsar.proto.CommandPartitionedTopicMetadata")
	proto.RegisterType((*CommandPartitionedTopicMetadataResponse)(nil), "pulsar.proto.CommandPartitionedTopicMetadataResponse")
	proto.RegisterType((*CommandLookupTopic)(nil), "pulsar.proto.CommandLookupTopic")
	proto.RegisterType((*CommandLookupTopicResponse)(nil), "pulsar.proto.CommandLookupTopicResponse")
	proto.RegisterType((*CommandProducer)(nil), "pulsar.proto.CommandProducer")
	proto.RegisterType((*CommandSend)(nil), "pulsar.proto.CommandSend")
	proto.RegisterType((*CommandSendReceipt)(nil), "pulsar.proto.CommandSendReceipt")
	proto.RegisterType((*CommandSendError)(nil), "pulsar.proto.CommandSendError")
	proto.RegisterType((*CommandMessage)(nil), "pulsar.proto.CommandMessage")
	proto.RegisterType((*CommandAck)(nil), "pulsar.proto.CommandAck")
	proto.RegisterType((*CommandFlow)(nil), "pulsar.proto.CommandFlow")
	proto.RegisterType((*CommandUnsubscribe)(nil), "pulsar.proto.CommandUnsubscribe")
	proto.RegisterType((*CommandCloseProducer)(nil), "pulsar.proto.CommandCloseProducer")
	proto.RegisterType((*CommandCloseConsumer)(nil), "pulsar.proto.CommandCloseConsumer")
	proto.RegisterType((*CommandRedeliverUnacknowledgedMessages)(nil), "pulsar.proto.CommandRedeliverUnacknowledgedMessages")
	proto.RegisterType((*CommandSuccess)(nil), "pulsar.proto.CommandSuccess")
	proto.RegisterType((*CommandProducerSuccess)(nil), "pulsar.proto.CommandProducerSuccess")
	proto.RegisterType((*CommandError)(nil), "pulsar.proto.CommandError")
	proto.RegisterType((*CommandPing)(nil), "pulsar.proto.CommandPing")
	proto.RegisterType((*CommandPong)(nil), "pulsar.proto.CommandPong")
	proto.RegisterType((*CommandConsumerStats)(nil), "pulsar.proto.CommandConsumerStats")
	proto.RegisterType((*CommandConsumerStatsResponse)(nil), "pulsar.proto.CommandConsumerStatsResponse")
	proto.RegisterType((*BaseCommand)(nil), "pulsar.proto.BaseCommand")
	proto.RegisterEnum("pulsar.proto.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("pulsar.proto.ServerError", ServerError_name, ServerError_value)
	proto.RegisterEnum("pulsar.proto.AuthMethod", AuthMethod_name, AuthMethod_value)
	proto.RegisterEnum("pulsar.proto.ProtocolVersion", ProtocolVersion_name, ProtocolVersion_value)
	proto.RegisterEnum("pulsar.proto.CommandSubscribe_SubType", CommandSubscribe_SubType_name, CommandSubscribe_SubType_value)
	proto.RegisterEnum("pulsar.proto.CommandPartitionedTopicMetadataResponse_LookupType", CommandPartitionedTopicMetadataResponse_LookupType_name, CommandPartitionedTopicMetadataResponse_LookupType_value)
	proto.RegisterEnum("pulsar.proto.CommandLookupTopicResponse_LookupType", CommandLookupTopicResponse_LookupType_name, CommandLookupTopicResponse_LookupType_value)
	proto.RegisterEnum("pulsar.proto.CommandAck_AckType", CommandAck_AckType_name, CommandAck_AckType_value)
	proto.RegisterEnum("pulsar.proto.CommandAck_ValidationError", CommandAck_ValidationError_name, CommandAck_ValidationError_value)
	proto.RegisterEnum("pulsar.proto.BaseCommand_Type", BaseCommand_Type_name, BaseCommand_Type_value)
}

func init() { proto.RegisterFile("proto/PulsarApi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x39, 0xcb, 0x73, 0xdb, 0xc6,
	0xf9, 0x02, 0x1f, 0x22, 0xf9, 0x81, 0x8f, 0xf5, 0xda, 0xb2, 0x61, 0x27, 0xb1, 0x65, 0x26, 0x4e,
	0x14, 0xfd, 0x7e, 0x56, 0x6c, 0xc5, 0x71, 0x13, 0x37, 0x9d, 0x09, 0x45, 0xc1, 0x0e, 0xc7, 0x12,
	0xa9, 0x2e, 0x49, 0x65, 0x92, 0x66, 0x86, 0x85, 0x80, 0x0d, 0x85, 0x11, 0x08, 0xb0, 0x78, 0xd0,
	0x96, 0x0f, 0xbd, 0xf6, 0xd2, 0x53, 0x2f, 0x39, 0x76, 0xa6, 0xff, 0x43, 0x67, 0x7a, 0xe8, 0xb9,
	0xe7, 0xfe, 0x17, 0xbd, 0xf6, 0xdc, 0x53, 0x67, 0x17, 0x8b, 0x17, 0x49, 0x89, 0x56, 0x9a, 0x13,
	0xb8, 0xdf, 0x7e, 0x8f, 0xfd, 0xde, 0xdf, 0x2e, 0x61, 0x63, 0xea, 0x3a, 0xbe, 0xf3, 0xc9, 0x51,
	0x60, 0x79, 0x9a, 0xdb, 0x9a, 0x9a, 0x3b, 0x7c, 0x8d, 0xab, 0x53, 0x0e, 0x08, 0x57, 0xcd, 0x3f,
	0x4a, 0x50, 0x3b, 0xa4, 0x9e, 0xa7, 0x8d, 0x69, 0xc7, 0xd8, 0xd7, 0x7c, 0x0d, 0xdf, 0x81, 0xb2,
	0x45, 0x8d, 0x31, 0x75, 0x3b, 0x86, 0x22, 0x6d, 0xe6, 0xb6, 0x0a, 0x24, 0x5e, 0x63, 0x05, 0x4a,
	0xd4, 0xf6, 0xdd, 0xf3, 0x8e, 0xa1, 0xe4, 0xf8, 0x56, 0xb4, 0xc4, 0x9b, 0x50, 0x99, 0x6a, 0xae,
	0x6f, 0xfa, 0xa6, 0x63, 0x2b, 0xf9, 0x4d, 0x69, 0xab, 0xf8, 0x2c, 0xf7, 0xf0, 0x31, 0x49, 0x80,
	0xf8, 0x7d, 0x90, 0x4f, 0x34, 0x5f, 0x3f, 0x1d, 0x99, 0xb6, 0x41, 0x5f, 0x2b, 0x85, 0x18, 0x07,
	0x38, 0xb8, 0xc3, 0xa0, 0xcd, 0x5d, 0x28, 0xbf, 0xa4, 0xe7, 0xc7, 0x9a, 0x15, 0x50, 0x8c, 0x20,
	0x7f, 0x46, 0xcf, 0xf9, 0x19, 0x2a, 0x84, 0xfd, 0xc4, 0x37, 0xa0, 0x38, 0x63, 0x5b, 0x5c, 0x78,
	0x85, 0x84, 0x8b, 0xe6, 0x3f, 0xf3, 0xd0, 0x10, 0x2a, 0x1c, 0x52, 0x5f, 0x33, 0x98, 0x12, 0xef,
	0x43, 0x6d, 0xea, 0x3a, 0x46, 0xa0, 0x53, 0x77, 0x64, 0x6b, 0x13, 0x2a, 0xb8, 0x54, 0x23, 0x60,
	0x57, 0x9b, 0x50, 0x7c, 0x0f, 0x64, 0x8f, 0xfe, 0x2e, 0xa0, 0xb6, 0x4e, 0x47, 0x66, 0xa4, 0x11,
	0x44, 0xa0, 0x8e, 0x81, 0xef, 0x43, 0x75, 0x1a, 0x9c, 0x58, 0xa6, 0x77, 0x3a, 0xf2, 0xcd, 0x09,
	0x55, 0xf2, 0x1c, 0x43, 0x16, 0xb0, 0x81, 0x39, 0xa1, 0xf8, 0x29, 0xc0, 0xd4, 0x75, 0xa6, 0xd4,
	0xf5, 0x4d, 0xea, 0x29, 0x85, 0xcd, 0xfc, 0x96, 0xbc, 0x7b, 0x73, 0x27, 0x6d, 0xe2, 0x9d, 0x48,
	0x21, 0x92, 0xc2, 0xc4, 0x1f, 0x41, 0xc3, 0xa5, 0x53, 0xcb, 0xd4, 0x35, 0x9f, 0x1a, 0xa3, 0x1f,
	0x5c, 0x67, 0xa2, 0x14, 0x37, 0xa5, 0xad, 0x0a, 0xa9, 0x27, 0xe0, 0xe7, 0xae, 0x33, 0xe1, 0x9a,
	0x44, 0x36, 0x1c, 0x31, 0x7b, 0xac, 0x73, 0xb4, 0x6a, 0x0c, 0x7c, 0x49, 0xcf, 0xd9, 0x41, 0x63,
	0xb2, 0x91, 0xef, 0x28, 0xa5, 0xcd, 0xfc, 0x56, 0x85, 0xc8, 0x31, 0x6c, 0xe0, 0x60, 0x15, 0x64,
	0xdd, 0x99, 0x4c, 0x5d, 0xea, 0x79, 0xcc, 0x45, 0xe5, 0x4d, 0x69, 0xab, 0xbe, 0xfb, 0x5e, 0xf6,
	0xa4, 0xed, 0x04, 0x61, 0x70, 0x3e, 0xa5, 0xcf, 0x0a, 0xdd, 0x5e, 0x57, 0x25, 0x69, 0x3a, 0xbc,
	0x03, 0xd7, 0x02, 0x3b, 0x02, 0x50, 0x63, 0xe4, 0x99, 0x6f, 0xa8, 0x52, 0xd9, 0x94, 0xb6, 0x6a,
	0xcf, 0xa4, 0x47, 0x04, 0xa5, 0xf7, 0xfa, 0xe6, 0x1b, 0x8a, 0x9f, 0xc0, 0x86, 0x1d, 0x4c, 0x46,
	0x93, 0xd0, 0x3f, 0xde, 0xc8, 0xb4, 0x47, 0xdc, 0xdd, 0x8a, 0xcc, 0xfd, 0x2f, 0x3d, 0x26, 0xd8,
	0x0e, 0x26, 0xc2, 0x7d, 0x5e, 0xc7, 0xde, 0x63, 0x9b, 0xcd, 0x1f, 0x25, 0xd8, 0xe8, 0x9b, 0xf6,
	0xd8, 0xa2, 0xf3, 0x8e, 0xcd, 0xda, 0x5b, 0x7a, 0x6b, 0x7b, 0x2f, 0x98, 0x31, 0xb7, 0xdc, 0x8c,
	0x53, 0xed, 0xdc, 0x72, 0x34, 0xa1, 0x17, 0xf3, 0x77, 0x91, 0xc8, 0x02, 0xc6, 0xf4, 0x69, 0xfe,
	0x4b, 0x82, 0x7a, 0xdb, 0x99, 0x4c, 0x34, 0xdb, 0x68, 0x3b, 0xb6, 0x4d, 0x75, 0x1f, 0x3f, 0x80,
	0xba, 0x6e, 0x99, 0xd4, 0xf6, 0x47, 0x33, 0xea, 0x72, 0xe3, 0x86, 0xc1, 0x56, 0x0b, 0xa1, 0xc7,
	0x21, 0x10, 0x7f, 0x01, 0xb2, 0x16, 0xf8, 0xa7, 0xa3, 0x09, 0xf5, 0x4f, 0x1d, 0x83, 0xcb, 0xaf,
	0xef, 0x2a, 0xd9, 0xa3, 0xb7, 0x02, 0xff, 0xf4, 0x90, 0xef, 0x13, 0xd0, 0xe2, 0xdf, 0x78, 0x0b,
	0x50, 0x8a, 0x34, 0x0c, 0x68, 0x11, 0x2d, 0x09, 0x16, 0x0f, 0xe9, 0x77, 0xa0, 0xc2, 0x31, 0x99,
	0xad, 0x78, 0x1a, 0x56, 0x49, 0x99, 0x01, 0x78, 0x66, 0xff, 0x3f, 0x20, 0x2e, 0x46, 0x77, 0xac,
	0xf8, 0xa8, 0x61, 0x1a, 0x4a, 0x8f, 0x48, 0x23, 0xda, 0x12, 0xe7, 0x6d, 0x8e, 0x01, 0x65, 0x15,
	0xa5, 0x06, 0x53, 0xd5, 0xa3, 0xee, 0x8c, 0xba, 0xf3, 0xaa, 0x86, 0xd0, 0x48, 0xd5, 0x65, 0x82,
	0x72, 0x17, 0x0a, 0xfa, 0x6b, 0x3e, 0x96, 0xd4, 0x0f, 0x4e, 0x3c, 0xdd, 0x35, 0x4f, 0x28, 0x4b,
	0x75, 0xdf, 0x99, 0x9a, 0xba, 0x10, 0x10, 0x2e, 0x70, 0x13, 0xaa, 0x5e, 0x88, 0x32, 0xf5, 0x43,
	0xa6, 0x3c, 0xab, 0xd3, 0x30, 0xfc, 0x15, 0x94, 0xbc, 0xe0, 0x84, 0xc5, 0x2f, 0xf7, 0x5f, 0x7d,
	0xf7, 0xc3, 0x85, 0x20, 0xcf, 0x88, 0xda, 0xe9, 0x87, 0xd8, 0x24, 0x22, 0x63, 0x75, 0x41, 0x77,
	0x6c, 0x2f, 0x98, 0x50, 0x97, 0xd5, 0x85, 0x42, 0x58, 0x17, 0x22, 0x50, 0xc7, 0xc0, 0xef, 0x01,
	0xb8, 0xac, 0x4a, 0x78, 0x3e, 0xdb, 0x2f, 0xf2, 0xfd, 0x8a, 0x80, 0x74, 0x0c, 0x16, 0x6b, 0x31,
	0x3d, 0xf7, 0x95, 0x48, 0xd9, 0x08, 0xc8, 0x3d, 0xf5, 0x00, 0xea, 0x53, 0xd7, 0x74, 0x5c, 0xd3,
	0x3f, 0x1f, 0x59, 0x74, 0x46, 0x2d, 0xa5, 0xc4, 0x2c, 0x44, 0x6a, 0x11, 0xf4, 0x80, 0x01, 0xf1,
	0x5d, 0x28, 0x19, 0x81, 0xab, 0x9d, 0x58, 0x94, 0xa7, 0x6c, 0xf9, 0x59, 0xc1, 0x77, 0x03, 0x4a,
	0x22, 0x20, 0x56, 0x01, 0x79, 0xbe, 0xe6, 0xfa, 0x51, 0x86, 0xb1, 0x03, 0xb1, 0x74, 0x94, 0x77,
	0xdf, 0xc9, 0xaa, 0x9d, 0x29, 0xf2, 0xa4, 0xce, 0x89, 0x62, 0x58, 0x73, 0x17, 0x4a, 0xc2, 0x0c,
	0xb8, 0x06, 0x15, 0xf5, 0xb5, 0x6e, 0x05, 0x9e, 0x39, 0xa3, 0x68, 0x0d, 0x03, 0xac, 0xf7, 0x4f,
	0x35, 0x97, 0x1a, 0x48, 0xc2, 0x55, 0x28, 0x3f, 0xd7, 0x4c, 0xcb, 0x99, 0x51, 0x17, 0xe5, 0x9a,
	0xc7, 0x70, 0x4f, 0xd8, 0xf2, 0x28, 0x4a, 0x22, 0x6a, 0x0c, 0x98, 0x9f, 0xe2, 0x6c, 0x5d, 0xee,
	0xc5, 0xac, 0xf9, 0x72, 0x73, 0xe6, 0x6b, 0xfe, 0x2d, 0x07, 0x1f, 0xad, 0x60, 0x4c, 0xa8, 0x37,
	0x75, 0x6c, 0x8f, 0xe2, 0xbb, 0x00, 0x71, 0x06, 0xb3, 0x72, 0x20, 0x6d, 0xd5, 0x48, 0x0a, 0xb2,
	0x42, 0x14, 0xfe, 0x1e, 0xca, 0xae, 0x60, 0xc5, 0xb3, 0xa5, 0xbe, 0xfb, 0xd5, 0xd2, 0x60, 0x59,
	0x75, 0x8e, 0x9d, 0x03, 0xc7, 0x39, 0x0b, 0xa6, 0x3c, 0x8c, 0x62, 0x8e, 0xf8, 0x13, 0x28, 0x52,
	0xd7, 0x75, 0x5c, 0x9e, 0x64, 0xf5, 0xdd, 0xdb, 0x59, 0xd6, 0x7d, 0x9e, 0x32, 0x2a, 0x43, 0x20,
	0x21, 0x1e, 0x6b, 0xaf, 0xc2, 0x8d, 0x22, 0xbd, 0xa3, 0x65, 0xf3, 0x01, 0x40, 0x22, 0x02, 0xcb,
	0xcc, 0x5b, 0xba, 0x4e, 0x3d, 0x2f, 0x74, 0x10, 0x73, 0x0a, 0x73, 0x50, 0x73, 0x06, 0x58, 0x9c,
	0x58, 0x60, 0x73, 0x7b, 0xff, 0x14, 0x2f, 0xe0, 0xff, 0x83, 0x1a, 0x2b, 0x1c, 0x2c, 0x14, 0x35,
	0xdf, 0x9c, 0x85, 0xf6, 0x29, 0x3f, 0x2b, 0xfe, 0xa0, 0x59, 0x1e, 0x25, 0xd9, 0xbd, 0xe6, 0x8f,
	0x79, 0xb8, 0xb3, 0x28, 0x38, 0xf6, 0xd2, 0x36, 0xa0, 0x13, 0xd7, 0x39, 0xa3, 0x2e, 0xd3, 0xd9,
	0xd4, 0xe9, 0xd0, 0xb5, 0xb8, 0xaf, 0x2a, 0x64, 0x01, 0x8e, 0x1f, 0xc1, 0xf5, 0x79, 0xd8, 0xc0,
	0xf2, 0x44, 0xb9, 0x5e, 0xb6, 0x85, 0x7b, 0x0b, 0x4e, 0xfc, 0x74, 0xa9, 0x13, 0x97, 0x9c, 0x6c,
	0xb9, 0xdf, 0xb2, 0x96, 0x29, 0xac, 0xb4, 0x4c, 0xf1, 0x62, 0xcb, 0x24, 0x31, 0xb0, 0x7e, 0xf5,
	0x18, 0x28, 0x65, 0x63, 0xe0, 0xd3, 0x4c, 0x0c, 0x54, 0xa1, 0x4c, 0xa8, 0x61, 0xba, 0x54, 0xf7,
	0xd1, 0x1a, 0x8b, 0x08, 0x51, 0xa5, 0x91, 0x94, 0x8a, 0x88, 0x1c, 0x9b, 0xef, 0x1a, 0x51, 0x10,
	0x8b, 0xd9, 0xe7, 0x82, 0x78, 0xb8, 0x07, 0x72, 0x3c, 0x32, 0x25, 0xd3, 0x50, 0x04, 0x5a, 0xa8,
	0x7a, 0xf9, 0x25, 0x55, 0x2f, 0x3b, 0x72, 0x15, 0x44, 0x87, 0x4d, 0x8d, 0x5c, 0xcd, 0x00, 0xe4,
	0xa8, 0xfe, 0x52, 0xdb, 0x98, 0x97, 0x29, 0x2d, 0xc8, 0x5c, 0x39, 0xa2, 0x7d, 0x00, 0xd5, 0xf4,
	0x7c, 0x21, 0x46, 0x4f, 0xe9, 0x31, 0x91, 0x53, 0x63, 0x45, 0xf3, 0x4f, 0x52, 0x9c, 0x18, 0x4c,
	0x2e, 0xa1, 0x3a, 0x35, 0xa7, 0xfe, 0xcf, 0x20, 0xfe, 0x19, 0x40, 0xaa, 0xf0, 0xe6, 0x57, 0x17,
	0xde, 0xca, 0x24, 0xae, 0xb9, 0x7f, 0x96, 0x92, 0xbe, 0x47, 0x6d, 0x83, 0x47, 0xc1, 0xcf, 0x70,
	0xa4, 0x38, 0xe2, 0xc2, 0xee, 0x77, 0xa5, 0x88, 0x2b, 0xf0, 0x80, 0x88, 0x23, 0x6e, 0x12, 0xcf,
	0x3a, 0x42, 0x89, 0xf9, 0xd6, 0x28, 0x2d, 0xb4, 0xc6, 0xac, 0x41, 0xd8, 0xe9, 0xde, 0xde, 0x20,
	0x7f, 0xc9, 0x03, 0x08, 0x79, 0x2d, 0xfd, 0x6c, 0xb5, 0xac, 0x5f, 0x42, 0x59, 0xd3, 0xcf, 0x46,
	0x3e, 0x6b, 0xf5, 0x39, 0xae, 0xec, 0xe6, 0xd2, 0xc4, 0x6f, 0xe9, 0x67, 0x3b, 0x2d, 0xfd, 0x2c,
	0x6c, 0xf2, 0x5a, 0xf8, 0x63, 0xc1, 0x73, 0x57, 0x38, 0x28, 0xee, 0x03, 0x9a, 0x69, 0x96, 0x69,
	0x68, 0x7c, 0x9a, 0x4c, 0xd7, 0xf8, 0xad, 0x0b, 0x0f, 0x70, 0x1c, 0x13, 0x84, 0xc6, 0x6f, 0xcc,
	0xb2, 0x80, 0xe6, 0xc7, 0x50, 0x12, 0x87, 0xc4, 0x75, 0x80, 0x8e, 0x6d, 0x98, 0x33, 0xd3, 0x08,
	0x34, 0x0b, 0xad, 0xb1, 0x75, 0x3b, 0x98, 0x04, 0x16, 0x2f, 0x29, 0x48, 0x6a, 0xbe, 0x81, 0xc6,
	0x1c, 0x3b, 0x7c, 0x17, 0xee, 0x0c, 0xe7, 0x66, 0xef, 0xb6, 0xe3, 0xba, 0x01, 0x9f, 0x89, 0xd0,
	0x1a, 0xbe, 0x09, 0x78, 0x9f, 0xa6, 0x06, 0x79, 0x4e, 0x85, 0x24, 0x7c, 0x03, 0x50, 0xfb, 0x94,
	0xea, 0x67, 0x5e, 0x30, 0x39, 0x34, 0xbd, 0x09, 0x9b, 0xbe, 0x51, 0x0e, 0xdf, 0x86, 0x0d, 0x3e,
	0x88, 0xef, 0xd3, 0x3e, 0x75, 0x4d, 0xcd, 0x32, 0xdf, 0xd0, 0x90, 0x20, 0xdf, 0x3c, 0x8e, 0x33,
	0xf8, 0xb9, 0xe5, 0xbc, 0x5a, 0xed, 0xa4, 0x0f, 0xa1, 0x2e, 0x0c, 0x77, 0x44, 0xdd, 0x89, 0xe9,
	0x7b, 0xdc, 0x55, 0x35, 0x32, 0x07, 0x6d, 0x0e, 0xe2, 0x0c, 0x1d, 0xda, 0x5e, 0x3c, 0x06, 0xae,
	0x64, 0xbf, 0x62, 0x96, 0x38, 0x86, 0x1b, 0xd1, 0x10, 0x6b, 0x39, 0x1e, 0x8d, 0x4b, 0xe0, 0xca,
	0x34, 0xbb, 0x1a, 0xdf, 0xb6, 0x38, 0xd0, 0xff, 0x7c, 0xde, 0x3f, 0x48, 0xf0, 0xa1, 0x60, 0x4c,
	0xa8, 0x41, 0x2d, 0x73, 0x46, 0xdd, 0xa1, 0xad, 0xe9, 0x67, 0xb6, 0xf3, 0x8a, 0xdf, 0xc2, 0xa3,
	0x4c, 0xf4, 0x56, 0x8b, 0xfa, 0x12, 0xe4, 0x24, 0xc2, 0x99, 0xd9, 0xf3, 0xab, 0x42, 0x1c, 0xe2,
	0x10, 0xf7, 0x9a, 0x9f, 0xc4, 0xb9, 0x2f, 0x46, 0x8d, 0xb9, 0xa3, 0x4b, 0xf3, 0x47, 0xff, 0x1e,
	0x6e, 0xce, 0x35, 0x9a, 0xb7, 0x23, 0x5c, 0x6c, 0x1c, 0xb9, 0xc5, 0xbb, 0x7a, 0xf3, 0x35, 0x54,
	0x05, 0xf7, 0x30, 0xde, 0x57, 0xf0, 0x8c, 0x8b, 0x60, 0xee, 0xea, 0x45, 0x30, 0x9f, 0x2d, 0x82,
	0xb5, 0x38, 0xe0, 0x8f, 0x4c, 0x7b, 0x9c, 0x5e, 0x3a, 0xf6, 0x38, 0x1d, 0x08, 0xc2, 0xf2, 0x7d,
	0x5f, 0xf3, 0x57, 0xea, 0xbc, 0xea, 0x8a, 0xd1, 0xfc, 0x77, 0x01, 0xde, 0x5d, 0xc6, 0x98, 0x2c,
	0x1f, 0x52, 0x16, 0x04, 0x7c, 0x0e, 0xc0, 0x15, 0x1b, 0xe9, 0x8e, 0x41, 0xc5, 0x65, 0xf3, 0x12,
	0x2b, 0x54, 0x38, 0x72, 0xdb, 0x31, 0x28, 0x73, 0x47, 0x48, 0x99, 0xd8, 0x83, 0xf7, 0x71, 0x0e,
	0x8c, 0xfa, 0xc0, 0x5d, 0x80, 0x89, 0x37, 0x26, 0x9a, 0x4f, 0x7b, 0x81, 0xcf, 0x6b, 0x9f, 0x44,
	0x52, 0x10, 0x36, 0xf1, 0x4d, 0xbc, 0xf1, 0xe0, 0xd4, 0x75, 0x82, 0xf1, 0xe9, 0x34, 0xf0, 0x19,
	0x56, 0x91, 0x63, 0x2d, 0xc0, 0x05, 0x2e, 0xa3, 0x8c, 0x43, 0x9e, 0x4f, 0x4b, 0x21, 0x6e, 0x06,
	0xce, 0x2e, 0x80, 0xe9, 0x5b, 0x94, 0x18, 0x91, 0xb2, 0x37, 0xab, 0x6d, 0x40, 0xda, 0x4c, 0x33,
	0x2d, 0x76, 0x3f, 0x8a, 0x6a, 0x0e, 0xbb, 0x3b, 0x15, 0xc8, 0x02, 0x1c, 0x6f, 0x41, 0x23, 0x60,
	0xe9, 0x95, 0xe4, 0x15, 0xbf, 0x3d, 0x15, 0xc8, 0x3c, 0x18, 0xef, 0xc1, 0xbb, 0x27, 0x96, 0xc3,
	0x40, 0x91, 0x3f, 0x7a, 0xf6, 0x50, 0xe0, 0x78, 0x63, 0x4f, 0x01, 0x36, 0x04, 0x92, 0x4b, 0x71,
	0x58, 0x90, 0x69, 0x86, 0xc1, 0x2a, 0x30, 0x7f, 0xfe, 0xa8, 0x90, 0x68, 0xc9, 0xaa, 0xa4, 0x1e,
	0xdd, 0xb2, 0xfb, 0xa6, 0xad, 0x53, 0xa5, 0x1a, 0xde, 0xef, 0xb3, 0x50, 0x8c, 0xa1, 0xc0, 0xdb,
	0x5d, 0x8d, 0xef, 0xf2, 0xdf, 0xbc, 0xc2, 0x86, 0x76, 0x52, 0x5f, 0x4f, 0x4d, 0x97, 0x1a, 0x4a,
	0x9d, 0x5b, 0x6f, 0x0e, 0x2a, 0x7c, 0xb6, 0xa7, 0xe9, 0x67, 0x96, 0x33, 0x56, 0x1a, 0x5c, 0xcd,
	0x14, 0xa4, 0xf9, 0x8f, 0x6b, 0x20, 0xef, 0x69, 0xac, 0x98, 0xf1, 0xb0, 0xc3, 0xbb, 0x42, 0x96,
	0xc4, 0x53, 0xe8, 0x6e, 0x36, 0x78, 0x52, 0x88, 0x3b, 0xbc, 0xb1, 0x86, 0x67, 0x79, 0x0a, 0x25,
	0x71, 0x62, 0x1e, 0x73, 0xf2, 0xee, 0xbb, 0x4b, 0x1b, 0xa2, 0x98, 0x55, 0x49, 0x84, 0x8c, 0xbf,
	0x84, 0x4a, 0xac, 0xa9, 0x18, 0xa3, 0xee, 0x5e, 0x46, 0x49, 0x0d, 0x92, 0x10, 0x30, 0xea, 0xb8,
	0x65, 0xf0, 0x60, 0xbc, 0x88, 0x3a, 0xbe, 0xf4, 0x93, 0x84, 0x00, 0x7f, 0x01, 0xe5, 0xa8, 0xd4,
	0xf0, 0x18, 0x95, 0x97, 0x3c, 0x8b, 0xa5, 0xcb, 0x1a, 0x89, 0xd1, 0xf1, 0x43, 0x28, 0x78, 0xd4,
	0x36, 0x78, 0xb8, 0xca, 0xf3, 0xf9, 0x95, 0x1e, 0x38, 0x39, 0x1a, 0x6e, 0x43, 0x95, 0x7d, 0x47,
	0x6e, 0x38, 0x7f, 0xf2, 0xe8, 0x95, 0x2f, 0x18, 0x5a, 0x52, 0x73, 0x2a, 0x91, 0xbd, 0xd4, 0xd0,
	0xfa, 0x2b, 0x00, 0xce, 0x24, 0xac, 0x6f, 0xe5, 0xcb, 0xb4, 0x8d, 0xa6, 0x4a, 0x52, 0xf1, 0xe2,
	0x01, 0xf3, 0x69, 0x52, 0xe8, 0x2a, 0x97, 0x78, 0x48, 0xc4, 0x7d, 0x5c, 0x06, 0xf1, 0x36, 0xe4,
	0x35, 0xfd, 0x8c, 0x87, 0xb9, 0x3c, 0xff, 0x6c, 0x95, 0x8c, 0x39, 0x84, 0x21, 0x31, 0xb3, 0xfc,
	0x60, 0x39, 0xaf, 0x78, 0x90, 0x5f, 0x64, 0x16, 0x36, 0x3d, 0x10, 0x8e, 0x86, 0xf7, 0x40, 0x0e,
	0x92, 0x9e, 0xcf, 0x23, 0xff, 0x22, 0xab, 0xa4, 0x66, 0x03, 0x92, 0x26, 0x62, 0x6a, 0x79, 0x61,
	0xbb, 0xe1, 0xb9, 0x71, 0x91, 0x5a, 0xa2, 0x25, 0x91, 0x08, 0x19, 0x3f, 0x8a, 0x1a, 0x45, 0x9d,
	0x53, 0xdd, 0x59, 0x4a, 0x95, 0xe9, 0x14, 0x1d, 0xa8, 0xeb, 0xac, 0xe7, 0x8f, 0xe2, 0xa0, 0x69,
	0x70, 0xd2, 0xe6, 0xf2, 0x78, 0x4d, 0x8f, 0x1d, 0xa4, 0xa6, 0x67, 0xa6, 0x90, 0x98, 0x55, 0x54,
	0xbf, 0x14, 0xb4, 0x8a, 0x55, 0x54, 0x58, 0x04, 0xab, 0x78, 0xf0, 0xe8, 0xf1, 0x27, 0xb7, 0xb0,
	0x89, 0x46, 0x86, 0xb8, 0xc6, 0x99, 0x7d, 0x70, 0x69, 0x30, 0x47, 0x06, 0x69, 0x4c, 0xe7, 0x9a,
	0xf6, 0x43, 0x28, 0x4c, 0x4d, 0x7b, 0xac, 0xe0, 0x4b, 0x7c, 0xc8, 0x1a, 0x22, 0xe1, 0x68, 0x1c,
	0xdd, 0xb1, 0xc7, 0xca, 0xf5, 0xcb, 0xd0, 0x1d, 0x8e, 0xee, 0xd8, 0x63, 0xfc, 0x7b, 0xb8, 0xe7,
	0x5e, 0x3e, 0xdf, 0x28, 0x37, 0x38, 0xa7, 0x27, 0x4b, 0x39, 0xad, 0x98, 0x8d, 0xc8, 0x2a, 0xe6,
	0xf8, 0x37, 0x70, 0x2d, 0x7e, 0x25, 0x8a, 0x1e, 0x73, 0x94, 0x0d, 0x2e, 0xf1, 0xe1, 0xd5, 0x5e,
	0x80, 0x16, 0xf9, 0x60, 0x0f, 0x6e, 0x2f, 0x00, 0xa3, 0xbe, 0xad, 0xdc, 0xe4, 0x42, 0x3e, 0xfb,
	0x49, 0xcf, 0x4c, 0xe4, 0x62, 0xbe, 0x2c, 0x89, 0xac, 0xe4, 0x81, 0x43, 0xb9, 0x75, 0x49, 0x12,
	0xa5, 0x1f, 0x42, 0xd2, 0x44, 0xf8, 0x3b, 0xb8, 0x6e, 0x2d, 0x3e, 0x92, 0x28, 0x0a, 0xe7, 0xb5,
	0xf5, 0xb6, 0x8f, 0x2a, 0x64, 0x19, 0x13, 0xfc, 0x75, 0xf2, 0x28, 0xca, 0x07, 0x19, 0xe5, 0xf6,
	0x65, 0xa1, 0x9e, 0x19, 0x79, 0xb2, 0x84, 0xf8, 0xb7, 0xb0, 0xa1, 0x2f, 0x1b, 0x89, 0x94, 0x3b,
	0x9c, 0xe3, 0xf6, 0x5b, 0x70, 0x8c, 0x4e, 0xba, 0x9c, 0x51, 0xf3, 0xef, 0x79, 0x28, 0x44, 0x0f,
	0x6d, 0xed, 0x5e, 0xb7, 0xab, 0xb6, 0x07, 0x28, 0x87, 0x6b, 0x50, 0x11, 0x0b, 0x75, 0x1f, 0xe5,
	0xd9, 0xb2, 0x3f, 0xdc, 0xeb, 0xb7, 0x49, 0x67, 0x4f, 0x45, 0x05, 0x5c, 0x85, 0xf2, 0x11, 0xe9,
	0xed, 0x0f, 0xdb, 0x2a, 0x41, 0x45, 0x5c, 0x86, 0x42, 0x5f, 0xed, 0xee, 0xa3, 0x75, 0x8c, 0xa0,
	0xca, 0x7e, 0x8d, 0x88, 0xda, 0x56, 0x3b, 0x47, 0x03, 0x54, 0x62, 0xb7, 0x39, 0x0e, 0x51, 0x09,
	0xe9, 0x11, 0x54, 0x66, 0x42, 0x0e, 0xd5, 0x7e, 0xbf, 0xf5, 0x42, 0x45, 0x15, 0x5c, 0x82, 0x7c,
	0xab, 0xfd, 0x12, 0x01, 0xe3, 0xf0, 0xfc, 0xa0, 0xf7, 0x0d, 0x92, 0x71, 0x03, 0xe4, 0x61, 0x37,
	0x11, 0x55, 0xe5, 0xcf, 0x7f, 0xc3, 0x76, 0x5b, 0xed, 0xf7, 0x51, 0x0d, 0x57, 0xa0, 0x18, 0x32,
	0xaa, 0x63, 0x0c, 0xf5, 0xf6, 0x41, 0xaf, 0xaf, 0x8e, 0xe2, 0x83, 0x34, 0x12, 0x58, 0xbb, 0xd7,
	0xed, 0x0f, 0x0f, 0x55, 0x82, 0x10, 0xbb, 0xf3, 0x45, 0x18, 0xa3, 0x88, 0xd1, 0x35, 0x26, 0xf0,
	0xa8, 0xd3, 0x7d, 0x81, 0x30, 0xff, 0xd5, 0xeb, 0xbe, 0x40, 0xd7, 0xf1, 0x03, 0xb8, 0x4f, 0xd4,
	0x7d, 0xf5, 0xa0, 0x73, 0xac, 0x92, 0xd1, 0xb0, 0xdb, 0x6a, 0xbf, 0xec, 0xf6, 0xbe, 0x39, 0x50,
	0xf7, 0x5f, 0xa8, 0xfb, 0x23, 0x71, 0xe6, 0x3e, 0xba, 0x81, 0x15, 0xb8, 0x71, 0xd4, 0x22, 0x83,
	0xce, 0xa0, 0xd3, 0xeb, 0xf2, 0x9d, 0x41, 0x6b, 0xbf, 0x35, 0x68, 0xa1, 0x0d, 0x7c, 0x1f, 0xde,
	0x5b, 0xb6, 0x33, 0x22, 0x6a, 0xff, 0xa8, 0xd7, 0xed, 0xab, 0xe8, 0x26, 0x06, 0x58, 0x3f, 0xe8,
	0xf5, 0x5e, 0x0e, 0x8f, 0xd0, 0x2d, 0x7c, 0x1d, 0x1a, 0xe1, 0xef, 0x04, 0x41, 0xe1, 0x2a, 0x88,
	0xc3, 0x8f, 0xfa, 0x83, 0xd6, 0xa0, 0x8f, 0x6e, 0xe3, 0x77, 0xe0, 0x56, 0x16, 0x96, 0x10, 0xdc,
	0xd9, 0xde, 0xe1, 0x4f, 0x5e, 0xe9, 0x7f, 0xb2, 0x98, 0x4a, 0xdd, 0x5e, 0x57, 0x45, 0x6b, 0xcc,
	0xc0, 0x07, 0xdf, 0x3d, 0x41, 0x12, 0x03, 0x7d, 0x77, 0xd0, 0xd9, 0x43, 0xb9, 0xed, 0xff, 0xe4,
	0x40, 0x4e, 0x0d, 0xc3, 0xcc, 0x65, 0x43, 0x9b, 0x15, 0x0d, 0x71, 0x4b, 0x5e, 0xc3, 0xd7, 0xa0,
	0x16, 0x25, 0x5c, 0xea, 0xe2, 0x7c, 0x44, 0x5d, 0xcf, 0xf4, 0x7c, 0x6a, 0xeb, 0xe2, 0x76, 0x9c,
	0xc3, 0xb7, 0xe0, 0x7a, 0x2b, 0xf0, 0x4f, 0xa9, 0xed, 0x9b, 0x7a, 0x72, 0x3b, 0x47, 0x79, 0x76,
	0xff, 0x6e, 0x85, 0x0f, 0x83, 0x6f, 0x52, 0xf0, 0x02, 0x93, 0x15, 0x85, 0xe6, 0x5e, 0xe0, 0x9d,
	0xa3, 0x22, 0xb3, 0x81, 0x78, 0xdf, 0xec, 0x3a, 0x3e, 0xa1, 0x9a, 0x71, 0x8e, 0xd6, 0x99, 0x23,
	0xa2, 0x8a, 0xbd, 0x17, 0x4e, 0x98, 0xbf, 0x0e, 0x1c, 0x5f, 0x53, 0x5f, 0xeb, 0x94, 0x1a, 0x34,
	0x6c, 0x50, 0xa8, 0x84, 0x3f, 0x86, 0x07, 0x97, 0xa2, 0xbd, 0xd6, 0x69, 0xf8, 0x20, 0x50, 0x66,
	0x2a, 0x45, 0x17, 0xff, 0x90, 0xba, 0xc2, 0x8c, 0xca, 0xfa, 0xeb, 0x74, 0xea, 0xb8, 0x3e, 0x35,
	0xc4, 0xdf, 0x33, 0xe1, 0x26, 0x30, 0x7c, 0x9e, 0xd0, 0x5d, 0xc7, 0x7f, 0xee, 0x04, 0xb6, 0x81,
	0x64, 0xe6, 0xf6, 0x7e, 0xea, 0x9f, 0x97, 0x78, 0xa7, 0xca, 0x5f, 0x15, 0xa2, 0x91, 0x3c, 0x82,
	0xd6, 0x98, 0x66, 0x03, 0xc7, 0x39, 0xd4, 0xec, 0x73, 0x12, 0xde, 0x53, 0x3c, 0x54, 0xdf, 0x7e,
	0x09, 0x90, 0xfc, 0xeb, 0xc5, 0x7c, 0x9d, 0xac, 0xba, 0x8e, 0x4d, 0xd1, 0x1a, 0x23, 0x4b, 0x60,
	0xdf, 0xea, 0xda, 0xf1, 0xe3, 0xd0, 0xfc, 0x09, 0xb0, 0xc5, 0x2c, 0xee, 0xa1, 0xdc, 0xf6, 0xb7,
	0xd0, 0x38, 0xca, 0xfe, 0xbb, 0x84, 0xd7, 0x21, 0x37, 0x7b, 0x84, 0xd6, 0xf8, 0x97, 0x11, 0xb2,
	0xef, 0x2e, 0xca, 0xf1, 0xef, 0xa7, 0x28, 0xcf, 0xbf, 0x4f, 0x50, 0x81, 0x7f, 0x3f, 0x43, 0x45,
	0xfe, 0x7d, 0x8a, 0xd6, 0xf9, 0xf7, 0x17, 0xa8, 0xc4, 0xbf, 0x9f, 0xa3, 0xf2, 0xde, 0x03, 0xb8,
	0xaf, 0x3b, 0x93, 0x9d, 0x73, 0xed, 0xd4, 0x71, 0xa2, 0x0a, 0xa3, 0x3b, 0x93, 0x89, 0x63, 0xef,
	0x68, 0xd1, 0x7f, 0xeb, 0x5f, 0xe7, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xd5, 0x5c, 0xd6,
	0x75, 0x1f, 0x00, 0x00,
}
